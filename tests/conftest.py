import asyncio

import pytest
from httpx import AsyncClient

from src.db.base import async_session
from src.main import app
from tests.utils.utils import get_auth_token_header

pytest_plugins = "pytest_asyncio"


@pytest.fixture(scope="session")
def event_loop():
    """
    Creates a new event loop instance for the test session. This fixture
    is required to ensure, that the db session will not be closed after each
    test is completed (which leads to several issues). We are overwriting the
    default event_loop fixture that is generated by pytest-asyncio, which is
    only function scoped.
    """
    loop = asyncio.new_event_loop()
    yield loop
    loop.close()


@pytest.fixture(scope="session")
async def db_session():
    """
    Creates a DB session object for the test session.
    """
    async with async_session() as session:
        yield session
        await session.close()


@pytest.fixture(scope="session")
async def client():
    """
    Creates a async http client for the test session.
    """
    async with AsyncClient(app=app, base_url="http://test") as client:
        client: AsyncClient
        yield client


@pytest.fixture(scope="session")
async def auth_header(client: AsyncClient):
    """
    Generates a authorization header based on the admin details
    stored in the environment variables.
    """
    return await get_auth_token_header(client)
